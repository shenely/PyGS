service("Clock segment")
    .task("Send epoch")
        .source("Iterate epoch",clock.continuous,EPOCH_SCALE)
        .sequence("Format epoch",epoch.format,EPOCH_ADDRESS)
        .sink("Publish epoch",socket.publish,socket)

service("Space segment")
    .task("Receive epoch")
        .source("Subscribe epoch",socket.subscribe,epoch_socket)
        .sequence("Parse epoch",epoch.parse)
        .sequence("Update epoch",epoch.update,clock)
        .split(["Iterate state","Execute command"])
    .assets([])
        .task("Iterate state")
            .source("Receive epoch")
            .choice("Before state",order.before,asset.state,ITERATE_MARGIN)
                .istrue()
                    .sequence("Inspect state",queue.peek,state_queue)
                    .choice("After lower",order.after,clock,REMOVE_MARGIN)
                        .istrue()
                            .choice("After upper",order.after,clock,PUBLISH_MARGIN)
                                .istrue()
                                    .sink()
                                .isfalse()
                                    .sequence("Dequeue state",queue.get,state_queue)
                                    .sequence("Transform state",transform.keplerian2inertial)
                                    .sequence("Format state",state.format,STATE_ADDRESS.format(name=asset.name))
                                    .sink("Publish state",socket.publish,socket)
                        .isfalse()
                            .sink("Remove state",queue.get,state_queue)
                .isfalse()
                    .sequence("Propagate state",propagate.kepler,asset.state,STEP_SIZE)
                    .sequence("Enqueue state",queue.put,state_queue)
                    .sequence("Inspect state")
        .task("Receive command")
            .source("Subscribe command",socket.subscribe)
            .sequence("Parse command",command.parse)
            .choice("After epoch",order.after,clock,COMMAND_MARGIN)
                .istrue()
                    .sequence("Enqueue command",queue.put,command_queue)
                    .sequence("Accept command",acknowledge.accept)
                    .sequence("Format acknowledge",acknowledge.format,ACKNOWLEDGE_ADDRESS.format(name=asset.name))
                    .sink("Publish acknowledge",socket.publish,socket)
                .isfalse()
                    .sequence("Reject command",acknowledge.reject)
                    .sequence("Format acknowledge")
        .task("Execute command")
            .source("Receive epoch")
            .sequence("Inspect command",queue.peek,command_queue)
            .choice("Before state",order.before,asset.state,EXECUTE_MARGIN)
                .istrue()
                    .sink("Remove command",queue.get,command_queue)
                .isfalse()
                    .choice("After state",order.after,asset.state,EXECUTE_MARGIN)
                        .istrue()
                            .sink()
                        .isfalse()
                            .sequence("Dequeue command",queue.get,command_queue)
                            .sequence("Execute command",command.execute,asset.state)
                            .sequence("Format result",result.format,RESULT_ADDRESS.format(name=asset.name))
                            .sink("Publish result",socket.publish,socket)

service("Ground segment")
    .task("Receive epoch","serial")
        .source("Subscribe epoch",socket.subscribe,epoch_socket)
        .sequence("Parse epoch",epoch.parse)
        .sequence("Update epoch",epoch.update,clock)
        .split(["Send command","Send status"])
    .assets([])
        .task("Send command")
            .source("Receive epoch")
            .sequence("Inspect command",queue.peek,command_queue)
            .choice("Before epoch",order.before,clock,DISCARD_MARGIN)
                .istrue()
                    .sink("Remove command",queue.get,command_queue)
                .isfalse()
                    .choice("After epoch",order.after,clock,COMMAND_MARGIN)
                        .istrue()
                            .sink()
                        .isfalse()
                            .sequence("Dequeue command",queue.get,command_queue)
                            .sequence("Format command",command.format,COMMAND_ADDRESS.format(name=asset.name))
                            .sink("Request command",socket)
        .task("Send status")
            .source("Receive epoch")
            .sequence("Inspect status",queue.peek,status_queue)
            .choice("Before epoch",order.before,clock,DISCARD_MARGIN)
                .istrue()
                    .sink("Remove status",queue.get,status_queue)
                .isfalse()
                    .choice("After epoch",order.after,clock,STATUS_MARGIN)
                        .istrue()
                            .sink()
                        .isfalse()
                            .sequence("Dequeue status",queue.get,status_queue)
                            .sequence("Format status,status.format,STATUS_ADDRESS.format(name=asset.name))
                            .sink("Publish status",socket.publish,socket)

service("User segment")
    .task("Receive epoch")
        .source("Subscribe epoch",socket.subscribe,epoch_socket)
        .sequence("Parse epoch",epoch.parse)
        .sequence("Update epoch",epoch.update,clock)
        .split(["Interpolate state","Update status"])
    .task("Send view")
        .source("Interpolate state")
        .split("Split geographic")
        .source("Split geographic")
        .merge("Merge inertial")
        .sequence("Inertial notice",notice.inertial,NOTICE_ADDRESS.format("Inertial")
        .sink("Publish notice",socket.publish,socket)
        .source("Split geographic")
        .sequence("Geographic transform",transform.inertial2geographic)
        .split("Split horizontal")
        .source("Split horizontal")
        .sequence("Geographic notice",notice.geographic,NOTICE_ADDRESS.format("Geographic")
        .merge("Merge geographic")
        .sink("Publish notice")
        .source("Split horizontal")
        .sequence("Horizontal transform",transform.geographic2horizontal,ground.state)
        .merge("Merge horizontal")
        .sequence("Horizontal notice,,notice.horizontal,NOTICE_ADDRESS.format("Horizontal"))
        .sink("Publish notice")
    .assets([])
        .task("Receive state")
            .source("Subscribe state",socket.subscribe,state_socket)
            .sequence("Parse state",state.parse)
            .choice("After clock",order.after,clock,ACCEPT_MARGIN)
                .istrue()
                    .sink("Enqueue state",queue.put,state_queue)
                .isfalse()
                    .sink()
        .task("Receive status")
            .source("Subscribe status",socket.subscribe,status_socket)
            .sequence("Parse status",status.parse)
            .choice("After clock",order.after,clock,ACCEPT_MARGIN)
                .istrue()
                    .sink("Enqueue status",queue.put,status_queue)
                .isfalse()
                    .sink()
        .task("Interpolate state",)
            .source("Receive epoch")
            .sequence("Inspect state",queue.peek,state_queue)
            .choice("After lower",order.after,clock,REMOVE_MARGIN)
                .istrue()
                    .choice("After upper",order.after,clock,INTERPOLATE_MARGIN)
                        .istrue()
                            .sequence("Block state",control.block)
                            .choice("Interpolate state",interpolate.hermite,clock)
                                .istrue()
                                    .sequence("Update state",state.update,asset.state)
                                    .sink("Send view")
                                .isfalse()
                                    .sink()
                        .isfalse()
                            .sequence("Dequeue state",queue.get,state_queue)
                            .sequence("Interpolate state")
                .isfalse()
                    .sink("Remove state",queue.get,state_queue)
        .task("Update status")
            .source("Receive epoch")
            .sequence("Inspect status",queue.peek,status.queue)
            .choice("After lower",order.after,clock,REMOVE_EPOCH)
                .istrue()
                    .choice("After upper",order.after,clock,STATUS_MARGIN)
                        .istrue()
                            .sink()
                        .isfalse()
                            .sequence("Dequeue status",queue.get,status_queue)
                            .sink("Update status",status.update,asset.status)
                .isfalse()
                    .sink("Remove status",queue.get,status_queue)